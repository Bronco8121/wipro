
# resource "aws_security_group" "sg" {
#   name        = "sg"
#   description = "Allow TLS inbound traffic and all outbound traffic"
#   vpc_id      = aws_vpc.main.id

#   ingress {
#     from_port   = 443
#     to_port     = 443
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   ingress {
#     from_port   = 22
#     to_port     = 22
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }  

#   ingress {
#     from_port   = 80
#     to_port     = 80
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }  

#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "sg"
#   }
# }

# resource "aws_lb" "main" {
#   name               = "main-alb"
#   internal           = false
#   load_balancer_type = "application"
#   security_groups    = [aws_security_group.sg.id, aws_security_group.sg.id]
#   subnets            = [aws_subnet.pub_subnet_1.id, aws_subnet.pub_subnet_2.id]

#   enable_deletion_protection = false

#   tags = {
#     Name = "main-alb"
#   }
# }

# resource "aws_lb_target_group" "main" {
#   name     = "main-tg"
#   port     = 80
#   protocol = "HTTP"
#   vpc_id   = aws_vpc.main.id
# }

# resource "aws_lb_target_group_attachment" "MyEC2InstanceEU" {
#   target_group_arn = aws_lb_target_group.main.arn
#   target_id        = aws_instance.MyEC2InstanceEU.id
#   port             = 80
# }

# resource "aws_lb_target_group_attachment" "MyMyEC2InstanceEU2" {
#   target_group_arn = aws_lb_target_group.main.arn
#   target_id        = aws_instance.MyEC2InstanceEU2.id
#   port             = 80
# }

# resource "aws_instance" "MyEC2InstanceEU" {
#   ami                    = "ami-0c38b837cd80f13bb"
#   instance_type          = "t2.micro"
#   subnet_id              = aws_subnet.pub_subnet_1.id
#   key_name               = "devops-key"  
#   vpc_security_group_ids = [aws_security_group.sg.id]

#   tags = {
#     Name = "MyEC2InstanceEU"
#   }

#   user_data = <<-EOF
#               #!/bin/bash
#               sudo apt update -y
#               sudo apt install apache2 -y
#               sudo systemctl enable apache2
#               sudo systemctl start apache2
#               EOF

#   associate_public_ip_address = true
# }

# resource "aws_instance" "MyEC2InstanceEU2" {
#   ami                    = "ami-0c38b837cd80f13bb"
#   instance_type          = "t2.micro"
#   subnet_id              = aws_subnet.pub_subnet_2.id
#   key_name               = "devops-key"  
#   vpc_security_group_ids = [aws_security_group.sg.id]

#   tags = {
#     Name = "MyEC2InstanceEU"
#   }

#   user_data = <<-EOF
#               #!/bin/bash
#               sudo apt update -y
#               sudo apt install apache2 -y
#               sudo systemctl enable apache2
#               sudo systemctl start apache2
#               EOF

#   associate_public_ip_address = true
# }

# resource "aws_acm_certificate" "domcert" {
#   domain_name       = "declandev.com"
#   validation_method = "DNS"

#   tags = {
#     Environment = "test"
#   }

#   lifecycle {
#     create_before_destroy = true
#   }
# }

# data "aws_route53_zone" "main" {
#   name         = "declandev.com"
#   private_zone = false
# }

# resource "aws_route53_record" "main" {
#   for_each = {
#     for dvo in aws_acm_certificate.domcert.domain_validation_options : dvo.domain_name => {
#       name   = dvo.resource_record_name
#       record = dvo.resource_record_value
#       type   = dvo.resource_record_type
#     }
#   }

#   allow_overwrite = true
#   name            = each.value.name
#   records         = [each.value.record]
#   ttl             = 60
#   type            = each.value.type
#   zone_id         = data.aws_route53_zone.main.id
# }

# resource "aws_acm_certificate_validation" "domcert" {
#   certificate_arn         = aws_acm_certificate.domcert.arn
#   validation_record_fqdns = [for record in aws_route53_record.main: record.fqdn]
# }

# resource "aws_lb_listener" "front_end" {
#   load_balancer_arn = aws_lb.main.arn
#   port              = "443"
#   protocol          = "HTTPS"
#   ssl_policy        = "ELBSecurityPolicy-2016-08"
#   certificate_arn   = aws_acm_certificate.domcert.arn

#   default_action {
#     type             = "forward"
#     target_group_arn = aws_lb_target_group.main.arn
#   }
# }


 # data "aws_acm_certificate" "amazon_issued" {
 #   domain      = "declandev.com"
 #   types       = ["AMAZON_ISSUED"]
 #   most_recent = true
 # }




